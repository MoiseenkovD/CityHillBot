from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from texts import WELCOME_TEXT, HELP_TEXT
from keyboards import categories_keyboard
from states import JoinFlow
from config import START_FEED_CHAT_ID

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(WELCOME_TEXT, reply_markup=categories_keyboard())
    await state.set_state(JoinFlow.waiting_category)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É –æ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if START_FEED_CHAT_ID:
        try:
            username = f"@{message.from_user.username}" if message.from_user.username else "(–Ω–µ—Ç username)"
            feed_text = (
                "üì£ –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫: /start\n"
                f"–ò–º—è: {message.from_user.full_name}\n"
                f"Username: {username}\n"
                f"User ID: {message.from_user.id}\n"
            )
            await message.bot.send_message(chat_id=START_FEED_CHAT_ID, text=feed_text)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ: {e}")


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(HELP_TEXT)


@router.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"chat_id —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>")


@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_any(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
