import asyncio
import os
import re
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")  # –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
START_FEED_CHAT_ID = os.getenv("START_FEED_CHAT_ID")  # –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not TARGET_CHAT_ID:
    raise ValueError("TARGET_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

TARGET_CHAT_ID = int(TARGET_CHAT_ID)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ä—Ç–µ
if START_FEED_CHAT_ID:
    try:
        START_FEED_CHAT_ID = int(START_FEED_CHAT_ID)
    except ValueError:
        START_FEED_CHAT_ID = None


WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç!\n"
    "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è(–∞—Å—å) –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ CityHill!\n\n"
    "–í –Ω–∞—à–µ–π —Ü–µ—Ä–∫–≤–∏ —Å–ª—É–∂–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ—â—å, –∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –ë–æ–∂—å–µ–π –ª—é–±–≤–∏ "
    "–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö.\n"
    "‚ú® –ö–∞–∂–¥—ã–π –≤–æ–ª–æ–Ω—Ç—ë—Ä ‚Äî –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–π —Å–µ–º—å–∏ CityHill.\n\n"
    "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
    "üîπ –ü–æ—Å–ª—É–∂–∏—Ç—å —Å–≤–æ–∏–º–∏ —Ç–∞–ª–∞–Ω—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º\n"
    "üîπ –ù–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
    "üîπ –†–∞—Å—Ç–∏ –¥—É—Ö–æ–≤–Ω–æ –∏ –ª–∏—á–Ω–æ\n\n"
    "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤(–∞) —Å–¥–µ–ª–∞—Ç—å —à–∞–≥ ‚Äî –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–µ–ª(–∞) –±—ã —Å–ª—É–∂–∏—Ç—å, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π üôè"
)

CATEGORY_TITLES: Dict[str, str] = {
    "worship":      "üé§ Worship",
    "kids":         "üë∂ Kids",
    "youth":        "üî• Youth | Teens",
    "media":        "üé• Media",
    "welcome":      "ü§ù Welcome Service",
    "hospitality":  "ü•ó Hospitality",
    "discover":     "‚ú® Discover Your Calling",
}

CATEGORY_HEADLINES: Dict[str, str] = {
    "discover": (
        "–ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—Å—Ç–æ –ø–æ–Ω—è—Ç—å, –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Å–ª—É–∂–∏—Ç—å –∏ –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å. "
        "–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ ‚Äî –≤—ã –Ω–µ –æ–¥–Ω–∏! –ù–∞—à–∏ –ª–∏–¥–µ—Ä—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à–∏ –¥–∞—Ä—ã "
        "–∏ –Ω–∞–π—Ç–∏ —Ç–æ —Å–ª—É–∂–µ–Ω–∏–µ, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à—É—é —Ä–∞–¥–æ—Å—Ç—å –∏ –ø–æ–ª—å–∑—É."
    ),
    "worship":     "–ë—É–¥—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –≤–µ–¥—ë—Ç –ª—é–¥–µ–π –≤ –ë–æ–∂—å–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ!",
    "kids":        "–í–ª–æ–∂–∏ —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –≤ –±—É–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ!",
    "youth":       "–ü–æ–º–æ–≥–∞–π –º–æ–ª–æ–¥—ã–º —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Å—Ç—Ä–æ–∏—Ç—å –∂–∏–∑–Ω—å —Å –ë–æ–≥–æ–º!",
    "media":       "–¢–≤–æ—Ä–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –∏ –¥–µ–ª–∏—Å—å –ë–æ–∂—å–∏–º —Å–ª–æ–≤–æ–º —á–µ—Ä–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞!",
    "welcome":     "–°—Ç–∞–Ω—å —Ç–µ–º, –∫—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –ª—é–¥–µ–π —Å —Ç–µ–ø–ª–æ–º –∏ –ª—é–±–æ–≤—å—é!",
    "hospitality": "–°–ª—É–∂–∏ –ª—é–¥—è–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ –≤–µ—â–∏ ‚Äî –µ–¥—É, –∫–æ—Ñ–µ –∏ —É—é—Ç.",
}

# –î–ª—è discover –Ω–µ—Ç –æ—Ç–¥–µ–ª–æ–≤ ‚Äî –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
DEPARTMENTS_BY_CATEGORY: Dict[str, List[str]] = {
    "worship": ["Singers", "Musicians"],
    "kids": ["Sunday school", "ICan (special kids)"],
    "youth": ["Chosen Gen", "Teens (Slavic)"],
    "media": ["Audio", "Live stream video", "Lights", "Production / Social", "Photography", "Graphic Design"],
    "welcome": ["Welcome Center", "Red Carpet", "Info Booth", "Ushers"],
    "hospitality": ["Coffee shop", "Kitchen"],
}

DEPT_DESCRIPTIONS_BY_CATEGORY: Dict[str, Dict[str, str]] = {
    # discover –±–µ–∑ –æ—Ç–¥–µ–ª–æ–≤ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã—à–µ, –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    "worship": {
        "Singers": "–∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π –≥–æ–ª–æ—Å, —á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∏ –ø–æ–∫–ª–æ–Ω—è—Ç—å—Å—è.",
        "Musicians": "—Ç–≤–æ–∏ –Ω–æ—Ç—ã –∏ –∞–∫–∫–æ—Ä–¥—ã –æ–∂–∏–≤–ª—è—é—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ö–≤–∞–ª—ã.",
    },
    "kids": {
        "Sunday school": "–ø–æ–º–æ–≥–∏ –¥–µ—Ç—è–º –ø–æ–∑–Ω–∞–≤–∞—Ç—å –ë–∏–±–ª–∏—é —Å —Ä–∞–¥–æ—Å—Ç—å—é.",
        "ICan (special kids)": "–±—É–¥—å —Å–≤–µ—Ç–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.",
    },
    "youth": {
        "Chosen Gen": "–ø–æ–¥–¥–µ—Ä–∂–∏ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –≤ –≤–µ—Ä–µ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–µ.",
        "Teens (Slavic)": "–±—É–¥—å —Ä—è–¥–æ–º —Å –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º–∏, –ø–æ–º–æ–≥–∞—è –∏–º –∏–¥—Ç–∏ –ë–æ–∂—å–∏–º –ø—É—Ç—ë–º.",
    },
    "media": {
        "Audio": "—Å–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–≤—É–∫ –¥–ª—è –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–ø–æ–≤–µ–¥–∏.",
        "Live stream video": "–ø–æ–º–æ–≥–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É–∂–µ–Ω–∏–µ –ª—é–¥—è–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.",
        "Lights": "–¥–æ–±–∞–≤—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –∫—Ä–∞—Å–æ—Ç—ã —á–µ—Ä–µ–∑ —Å–≤–µ—Ç.",
        "Production / Social": "–¥–µ–ª–∏—Å—å —Å–æ–±—ã—Ç–∏—è–º–∏ —Ü–µ—Ä–∫–≤–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –æ–Ω–ª–∞–π–Ω.",
        "Photography": "–∑–∞–ø–µ—á–∞—Ç–ª–∏ –∂–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ë–æ–∂—å–µ–π —Ä–∞–±–æ—Ç—ã.",
        "Graphic Design": "–∏—Å–ø–æ–ª—å–∑—É–π —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –¥–æ–Ω–µ—Å—Ç–∏ –ø–æ—Å–ª–∞–Ω–∏–µ.",
    },
    "welcome": {
        "Welcome Center": "–±—É–¥—å –ø–µ—Ä–≤–æ–π —É–ª—ã–±–∫–æ–π –¥–ª—è –≥–æ—Å—Ç–µ–π —Ü–µ—Ä–∫–≤–∏.",
        "Red Carpet": "–ø–æ–¥–∞—Ä–∏ –∫–∞–∂–¥–æ–º—É –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.",
        "Info Booth": "–ø–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –¥–æ–º–∞.",
        "Ushers": "—Å–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ø–æ—Ä—è–¥–∫–∞ –∏ –∑–∞–±–æ—Ç—ã –≤–æ –≤—Ä–µ–º—è —Å–ª—É–∂–µ–Ω–∏—è.",
    },
    "hospitality": {
        "Coffee shop": "—Å–¥–µ–ª–∞–π —á–∞—à–∫—É –∫–æ—Ñ–µ –º–µ—Å—Ç–æ–º –æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–¥–æ—Å—Ç–∏.",
        "Kitchen": "–≥–æ—Ç–æ–≤—å —Å –ª—é–±–æ–≤—å—é –∏ –∫–æ—Ä–º–∏, –∫–∞–∫ –¥–ª—è —Å–µ–º—å–∏.",
    },
}

PHONE_RE = re.compile(r"\+?\d[\d\-\s\(\)]{8,}")

def extract_phone(text: str) -> Optional[str]:
    if not text:
        return None
    m = PHONE_RE.search(text)
    if not m:
        return None
    raw = m.group(0)
    has_plus = raw.strip().startswith("+")
    digits = re.sub(r"\D", "", raw)
    if len(digits) < 9:
        return None
    return f"+{digits}" if has_plus else digits

def categories_keyboard(cols: int = 2) -> InlineKeyboardMarkup:
    buttons = [
        InlineKeyboardButton(text=title, callback_data=f"cat:{key}")
        for key, title in CATEGORY_TITLES.items()
    ]
    rows = [buttons[i:i+cols] for i in range(0, len(buttons), cols)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def departments_keyboard(category_key: str, cols: int = 2) -> InlineKeyboardMarkup:
    items = DEPARTMENTS_BY_CATEGORY.get(category_key, [])
    buttons = [InlineKeyboardButton(text=name, callback_data=f"dept:{name}") for name in items]
    rows = [buttons[i:i+cols] for i in range(0, len(buttons), cols)]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Back to categories", callback_data="back:categories")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def dept_apply_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply:selected")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:depts")],
    ])

def build_category_description_text(category_key: str) -> str:
    title = CATEGORY_TITLES.get(category_key, "‚Äî")
    head = CATEGORY_HEADLINES.get(category_key, "")
    return f"{title}\n{head}"

def build_dept_description_text(category_key: str, department: str) -> str:
    cat_title = CATEGORY_TITLES.get(category_key, "‚Äî")
    head = CATEGORY_HEADLINES.get(category_key, "")
    desc = DEPT_DESCRIPTIONS_BY_CATEGORY.get(category_key, {}).get(department, "")
    top = f"{cat_title}\n{head}" if head else cat_title
    middle = f"‚Ä¢ <b>{department}</b> ‚Äî {desc}" if desc else f"‚Ä¢ <b>{department}</b>"
    return f"{top}\n\n{middle}\n\n–ì–æ—Ç–æ–≤(–∞) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"

class JoinFlow(StatesGroup):
    waiting_category = State()
    waiting_department = State()
    waiting_apply = State()
    waiting_fullname = State()
    waiting_contact = State()

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(WELCOME_TEXT, reply_markup=categories_keyboard())
    await state.set_state(JoinFlow.waiting_category)

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É –æ–± –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ /start (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ) ---
    if START_FEED_CHAT_ID:
        try:
            username = f"@{message.from_user.username}" if message.from_user.username else "(–Ω–µ—Ç username)"
            # –ë–µ–∑ HTML-—Ç–µ–≥–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏
            feed_text = (
                "üì£ –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫: /start\n"
                f"–ò–º—è: {message.from_user.full_name}\n"
                f"Username: {username}\n"
                f"User ID: {message.from_user.id}\n"
            )
            await bot.send_message(chat_id=START_FEED_CHAT_ID, text=feed_text)
        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ: {e}")

@dp.callback_query(F.data.startswith("cat:"))
async def on_category_chosen(callback: types.CallbackQuery, state: FSMContext):
    cur = await state.get_state()
    if cur not in (JoinFlow.waiting_category, JoinFlow.waiting_department, JoinFlow.waiting_apply):
        await callback.answer("–ù–∞—á–Ω–∏ —Å /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–ª—É–∂–µ–Ω–∏–µ.", show_alert=True)
        return

    category_key = callback.data.split("cat:", 1)[1]
    if category_key not in CATEGORY_TITLES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª.", show_alert=True)
        return

    await state.update_data(category_key=category_key)

    # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è discover: –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
    if category_key == "discover":
        await state.update_data(department="Discover consultation")  # –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏
        text = build_category_description_text(category_key)
        await callback.message.edit_text(text, reply_markup=dept_apply_keyboard())
        await state.set_state(JoinFlow.waiting_apply)
        await callback.answer()
        return

    # –û–±—ã—á–Ω—ã–π –ø—É—Ç—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    text = build_category_description_text(category_key)
    await callback.message.edit_text(text, reply_markup=departments_keyboard(category_key))
    await state.set_state(JoinFlow.waiting_department)
    await callback.answer()

@dp.callback_query(F.data == "back:categories")
async def on_back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(WELCOME_TEXT, reply_markup=categories_keyboard())
    await state.set_state(JoinFlow.waiting_category)
    await callback.answer()

@dp.callback_query(F.data.startswith("dept:"))
async def on_department_chosen(callback: types.CallbackQuery, state: FSMContext):
    if await state.get_state() != JoinFlow.waiting_department:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —á–µ—Ä–µ–∑ /start.", show_alert=True)
        return

    department = callback.data.split("dept:", 1)[1]
    data = await state.get_data()
    category_key = data.get("category_key")

    valid_list = DEPARTMENTS_BY_CATEGORY.get(category_key, [])
    if department not in valid_list:
        await callback.answer("–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.", show_alert=True)
        return

    await state.update_data(department=department)
    text = build_dept_description_text(category_key, department)
    await callback.message.edit_text(text, reply_markup=dept_apply_keyboard())
    await state.set_state(JoinFlow.waiting_apply)
    await callback.answer()

@dp.callback_query(F.data == "back:depts")
async def on_back_to_depts(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_key = data.get("category_key")
    if not category_key:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start.", show_alert=True)
        return

    # –î–ª—è discover –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–∞–º –Ω–µ—Ç –æ—Ç–¥–µ–ª–æ–≤)
    if category_key == "discover":
        await callback.message.edit_text(WELCOME_TEXT, reply_markup=categories_keyboard())
        await state.set_state(JoinFlow.waiting_category)
        await callback.answer()
        return

    text = build_category_description_text(category_key)
    await callback.message.edit_text(text, reply_markup=departments_keyboard(category_key))
    await state.set_state(JoinFlow.waiting_department)
    await callback.answer()

@dp.callback_query(F.data == "apply:selected")
async def on_apply_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    department = data.get("department")
    if not department:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–µ–Ω–∏–µ.", show_alert=True)
        return

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ <b>—Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Ivan Petrov</code> –∏–ª–∏ <code>–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</code>.\n\n"
        "–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å."
    )
    await state.set_state(JoinFlow.waiting_fullname)
    await callback.answer()

@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_any(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(JoinFlow.waiting_fullname, F.text)
async def on_fullname(message: types.Message, state: FSMContext):
    full_name = " ".join(message.text.split())
    if len(full_name) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return

    await state.update_data(full_name=full_name)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {full_name}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º) "
        "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
    )
    await state.set_state(JoinFlow.waiting_contact)

@dp.message(JoinFlow.waiting_contact, F.contact)
async def on_contact_shared(message: types.Message, state: FSMContext):
    data = await state.get_data()
    department = data.get("department", "‚Äî")
    category_key = data.get("category_key")
    category_title = CATEGORY_TITLES.get(category_key, "‚Äî")
    full_name = data.get("full_name") or message.from_user.full_name

    contact = message.contact
    contact_owner = (
        "—Å–∞–º(–∞) –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç"
        if contact.user_id == message.from_user.id
        else f"–ø–µ—Ä–µ–¥–∞–ª(–∞) –∫–æ–Ω—Ç–∞–∫—Ç: {contact.first_name or ''} {contact.last_name or ''}".strip()
    )

    username = f"@{message.from_user.username}" if message.from_user.username else "(–Ω–µ—Ç username)"
    phone = contact.phone_number

    text_for_group = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–Ω–∏–µ</b>\n"
        f"–†–∞–∑–¥–µ–ª: <b>{category_title}</b>\n"
        f"–°–ª—É–∂–µ–Ω–∏–µ: <b>{department}</b>\n"
        f"–ò–º—è (–≤–≤–µ–¥–µ–Ω–æ): <b>{full_name}</b>\n"
        f"Username: {username}\n"
        f"User ID: <code>{message.from_user.id}</code>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {contact_owner}"
    )
    try:
        await bot.send_message(chat_id=TARGET_CHAT_ID, text=text_for_group)
    except Exception as e:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞: <code>{e}</code>",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
        return

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º üôå\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

@dp.message(JoinFlow.waiting_contact, F.text)
async def on_contact_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    department = data.get("department", "‚Äî")
    category_key = data.get("category_key")
    category_title = CATEGORY_TITLES.get(category_key, "‚Äî")
    full_name = data.get("full_name") or message.from_user.full_name

    phone = extract_phone(message.text)
    if not phone:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ü§î\n"
            "–ü—Ä–∏—à–ª–∏ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º: <code>+1 (425) 563-0696</code> –∏–ª–∏ <code>380939424247</code>\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
                    [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True,
                input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
        )
        return

    username = f"@{message.from_user.username}" if message.from_user.username else "(–Ω–µ—Ç username)"

    text_for_group = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–Ω–∏–µ</b>\n"
        f"–†–∞–∑–¥–µ–ª: <b>{category_title}</b>\n"
        f"–°–ª—É–∂–µ–Ω–∏–µ: <b>{department}</b>\n"
        f"–ò–º—è (–≤–≤–µ–¥–µ–Ω–æ): <b>{full_name}</b>\n"
        f"Username: {username}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>"
    )
    try:
        await bot.send_message(chat_id=TARGET_CHAT_ID, text=text_for_group)
    except Exception as e:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É. –°–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞: <code>{e}</code>",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
        return

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º üôå\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Ä–∞–∑–¥–µ–ª ‚Üí —Å–ª—É–∂–µ–Ω–∏–µ ‚Üí –û–ø–∏—Å–∞–Ω–∏–µ ‚Üí –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Üí –∏–º—è/—Ñ–∞–º–∏–ª–∏—è ‚Üí –∫–æ–Ω—Ç–∞–∫—Ç\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"chat_id —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>")

async def main():
    print("Bot is running...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


